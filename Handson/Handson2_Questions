Handson2 : 
==========

OOPS:
=====
1. Create empty class in C++. 
   1. Create 2 or 3 instance of the class in main() and print the size and address of all objects created.
   2. Modify class adding data members, and follow step 1 

2. Create the below class, create an object of the class and set name and print it through its instance.  
class Names 
{ 
    // Access specifier 
    public: 
  
    	// Data Members 
    	string name; 
  
    	// Member Functions() 
    	void printname() 
    	{ 
       		cout << "Geekname is: " << name; 
    	} 
}; 

3. Create a class with Default constructors and Parametrized constructors, and invoke it through main()

4. Add Destructor to the class in Question 3 , and execute program to check when destructors is called

5. Create the below Structure, create an object of the Struct and set name and print it through its instance. (Same as question 2, but class modified to struct) - Observer diff between struct & class removing access specifiers
struct Names 
{ 
    // Access specifier 
    public: 
  
    	// Data Members 
    	string name; 
  
    	// Member Functions() 
    	void printname() 
    	{ 
       		cout << "Geekname is: " << name; 
    	} 
}; 

6. Create class using all 3 access specifiers , and observer how access to data members and member function varies. 

7. Write C++ program to demonstrate implementation of Inheritance. Add constructor & Destructor to both parent & child class. Observer the order in which they are called.

8. C++ Program to demonstrate implementation of Single , Multiple , Multi-level Inheritance

10. C++ Program to implement function overloading to print int, double, float variables. 
	void print_val(int val);
	void print_val(float val);
	void print_val(double val);
	void print_val(char val);

11. Implement class with Static data members in C++

12. Program to Use Friend function in C++ and access private members of the class

13. Program to Use Local class in C++

14. Program using Nested class in C++. Try the following 
	1. Nested class can access private members of Enclosing class
	2. Enclosing class accessing private member of Nested class

========================================================
========================================================

Constructors & Destructors : 
=====================
1. Program to illustrate the use of copy constructor
2. Program to illustrate the use of destructor (Class containing pointers)
3. Program to initialise class variables using Initialisation list
	* For initialization of non-static const data members
	* For initialization of reference members
	* When constructorâ€™s parameter name is same as data member
